// generate-context-optimized.mjs (–í–µ—Ä—Å–∏—è 2.0 - –ï–¥–∏–Ω—ã–π –ø—Ä–æ—Ö–æ–¥)
import fs from 'fs';
import path from 'path';

// --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---

const IGNORE_LIST = [
  'node_modules', '.git', 'dist', 'build', '.cache', '.netlify', '.env', 'pnpm-lock.yaml',
  'package-lock.json', 'yarn.lock', 'README.md', 'LICENSE', '.gitignore', 'PROJECT_SCOUT_REPORT.md', 'PROJECT_CONTEXT.md', 
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∞–º–∏ —Å–∫—Ä–∏–ø—Ç—ã-—Å–±–æ—Ä—â–∏–∫–∏
  path.basename(import.meta.url.substring(7)), // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç —Å–∞–º —Å–µ–±—è (–¥–ª—è Windows/Linux)
  'export-supabase-schema.mjs', 'SUPABASE_SCHEMA.md', 'universal-context-scout.mjs', 'generate_project_summary.mjs', 'project_summary.txt', 'inspect-db-performance.mjs', 'DB_PERFORMANCE_REPORT.md',
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è IDE/OS —Ñ–∞–π–ª—ã
  '.DS_Store', 'Thumbs.db'
];

const BINARY_EXTENSIONS = [
  '.jpg', '.jpeg', '.png', '.gif', '.ico', '.svg', '.woff', '.woff2', '.ttf', '.eot', '.mp4', '.mp3'
];

// –§–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å, –∞ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é
const SUMMARIZE_FILES = {
  'renovate.json': (content) => '// –§–∞–π–ª renovate.json (—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞)',
  'tsconfig.json': (content) => '// –§–∞–π–ª tsconfig.json (—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞)',
  'routeTree.gen.ts': (content) => '// –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–π —Ñ–∞–π–ª TanStack Router\n// –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã: ', // –£–ø—Ä–æ—â–µ–Ω–æ, —Ç.–∫. –¥–µ—Ä–µ–≤–æ —É–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ
  'manifest.json': (content) => '// –§–∞–π–ª manifest.json (—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞)',
};

// –§–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ
const SKIP_CONTENT_FILES = [
    'robots.txt'
];

// --- –õ–û–ì–ò–ö–ê ---

function scanDirectory(dir, prefix = '') {
  let tree = '';
  let contents = '';

  const items = fs.readdirSync(dir).filter(item => !IGNORE_LIST.includes(item));

  items.forEach((item, index) => {
    const fullPath = path.join(dir, item);
    const isLast = index === items.length - 1;
    const connector = isLast ? '‚îî‚îÄ‚îÄ ' : '‚îú‚îÄ‚îÄ ';
    const nextPrefix = prefix + (isLast ? '    ' : '‚îÇ   ');

    try {
      const stat = fs.statSync(fullPath);
      const relativePath = path.relative(process.cwd(), fullPath).replace(/\\/g, '/');

      if (stat.isDirectory()) {
        tree += `${prefix}${connector}üìÅ ${item}/\n`;
        const result = scanDirectory(fullPath, nextPrefix);
        tree += result.tree;
        contents += result.contents;
      } else {
        const isBinary = BINARY_EXTENSIONS.some(ext => item.endsWith(ext));
        tree += `${prefix}${connector}üìÑ ${item}${isBinary ? ' (binary)' : ''}\n`;

        if (!isBinary) {
          if (SKIP_CONTENT_FILES.includes(item)) {
             contents += `üìÑ ${relativePath} (skipped)\n\n`;
             return;
          }

          const fileContent = fs.readFileSync(fullPath, 'utf8');

          if (SUMMARIZE_FILES[item]) {
            contents += `üìÑ ${relativePath}\n${SUMMARIZE_FILES[item](fileContent)}\n\n`;
          } else {
            contents += `# ${relativePath}\n`;
            contents += `--- BEGIN ${relativePath} ---\n`;
            contents += fileContent.trim();
            contents += `\n--- END ${relativePath} ---\n\n`;
          }
        }
      }
    } catch (err) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–∏—Å—Ç–µ–º–Ω—ã—Ö)
    }
  });

  return { tree, contents };
}

// --- –ì–ï–ù–ï–†–ê–¶–ò–Ø ---
console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞...');

const { tree, contents } = scanDirectory('.');

const finalOutput = `# Project Structure
${tree}

# File Contents
${contents}`;

fs.writeFileSync('PROJECT_CONTEXT.md', finalOutput.trim());

console.log('‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –≤ PROJECT_CONTEXT.md');
console.log('‚ú® –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: –ï–¥–∏–Ω—ã–π –ø—Ä–æ—Ö–æ–¥, –Ω–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è, —á–∏—Å—Ç–æ—Ç–∞ –∏ –ø–æ—Ä—è–¥–æ–∫!');