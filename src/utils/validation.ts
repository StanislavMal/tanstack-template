// üìÑ src/utils/validation.ts

/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Supabase
 */

export interface ValidationResult {
  isValid: boolean;
  error?: string;
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
 */
export function validatePromptName(name: string): ValidationResult {
  if (!name || !name.trim()) {
    return { isValid: false, error: 'Prompt name cannot be empty' };
  }
  
  if (name.length > 100) {
    return { isValid: false, error: 'Prompt name must be less than 100 characters' };
  }
  
  return { isValid: true };
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
 */
export function validatePromptContent(content: string): ValidationResult {
  if (!content || !content.trim()) {
    return { isValid: false, error: 'Prompt content cannot be empty' };
  }
  
  if (content.length > 10000) {
    return { isValid: false, error: 'Prompt content must be less than 10,000 characters' };
  }
  
  return { isValid: true };
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞
 */
export function validateConversationTitle(title: string): ValidationResult {
  if (!title || !title.trim()) {
    return { isValid: false, error: 'Conversation title cannot be empty' };
  }
  
  if (title.length > 200) {
    return { isValid: false, error: 'Conversation title must be less than 200 characters' };
  }
  
  return { isValid: true };
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
export function validateMessageContent(content: string): ValidationResult {
  if (!content || !content.trim()) {
    return { isValid: false, error: 'Message cannot be empty' };
  }
  
  if (content.length > 50000) {
    return { isValid: false, error: 'Message must be less than 50,000 characters' };
  }
  
  return { isValid: true };
}

/**
 * –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ (—É–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤)
 */
export function sanitizeString(str: string): string {
  return str
    .trim()
    .replace(/\s+/g, ' ') // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã ‚Üí –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª
    .replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]/g, ''); // –£–¥–∞–ª—è–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã
}