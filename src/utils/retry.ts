// üìÑ src/utils/retry.ts

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
 */

interface RetryOptions {
  maxAttempts?: number;
  initialDelay?: number;
  maxDelay?: number;
  backoffMultiplier?: number;
  onRetry?: (attempt: number, error: Error) => void;
}

const DEFAULT_OPTIONS: Required<RetryOptions> = {
  maxAttempts: 3,
  initialDelay: 1000,
  maxDelay: 10000,
  backoffMultiplier: 2,
  onRetry: () => {},
};

export async function retryAsync<T>(
  fn: () => Promise<T>,
  options: RetryOptions = {}
): Promise<T> {
  const opts = { ...DEFAULT_OPTIONS, ...options };
  let lastError: Error;
  
  for (let attempt = 1; attempt <= opts.maxAttempts; attempt++) {
    try {
      return await fn();
    } catch (error) {
      lastError = error instanceof Error ? error : new Error(String(error));
      
      // –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö
      if (isNonRetryableError(lastError)) {
        throw lastError;
      }
      
      if (attempt < opts.maxAttempts) {
        const delay = Math.min(
          opts.initialDelay * Math.pow(opts.backoffMultiplier, attempt - 1),
          opts.maxDelay
        );
        
        opts.onRetry(attempt, lastError);
        
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
  }
  
  throw lastError!;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ–ø–æ–≤—Ç–æ—Ä—è–µ–º–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏)
 */
function isNonRetryableError(error: Error): boolean {
  const message = error.message.toLowerCase();
  
  // –û—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
  if (message.includes('jwt') || message.includes('unauthorized') || message.includes('forbidden')) {
    return true;
  }
  
  // –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
  if (message.includes('duplicate') || message.includes('unique constraint') || message.includes('foreign key')) {
    return true;
  }
  
  return false;
}