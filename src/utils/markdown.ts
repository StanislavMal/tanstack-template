// üìÑ src/utils/markdown.ts

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ className —ç–ª–µ–º–µ–Ω—Ç–∞ <code>
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã: language-js, lang-python –∏ —Ç.–¥.
 */
export function extractLanguageFromCode(codeElement: HTMLElement): string {
  const className = codeElement.className || '';
  const match = className.match(/(?:language|lang)-(\w+)/);
  return match ? match[1] : '';
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç HTML –≤ —á–∏—Å—Ç—ã–π Markdown-—Ç–µ–∫—Å—Ç
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–ø–∏—Å–∫–æ–≤, –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞, —Ç–∞–±–ª–∏—Ü –∏ —Ç.–¥.
 */
export function htmlToPlainText(element: HTMLElement): string {
  let result = '';
  
  function processNode(
    node: Node, 
    depth: number = 0, 
    orderedCounters: Map<number, number> = new Map()
  ): void {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —É–∑–ª–æ–≤
    if (node.nodeType === Node.TEXT_NODE) {
      const text = node.textContent || '';
      if (text.trim()) {
        result += text;
      }
      return;
    }
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ-—ç–ª–µ–º–µ–Ω—Ç—ã
    if (node.nodeType !== Node.ELEMENT_NODE) return;
    
    const el = node as HTMLElement;
    const tagName = el.tagName.toLowerCase();
    
    // === –°–ü–ò–°–ö–ò (UL/OL) ===
    if (tagName === 'ul' || tagName === 'ol') {
      if (tagName === 'ol') {
        const start = parseInt(el.getAttribute('start') || '1');
        orderedCounters.set(depth, start);
      }
      
      Array.from(el.children).forEach((child) => {
        if (child.tagName.toLowerCase() === 'li') {
          processNode(child, depth, orderedCounters);
        }
      });
      
      if (tagName === 'ol') {
        orderedCounters.delete(depth);
      }
      
      if (depth === 0) {
        result += '\n';
      }
      return;
    }
    
    // === –≠–õ–ï–ú–ï–ù–¢–´ –°–ü–ò–°–ö–ê (LI) ===
    if (tagName === 'li') {
      const indent = '  '.repeat(depth);
      const parent = el.parentElement;
      const isOrdered = parent?.tagName.toLowerCase() === 'ol';
      
      if (isOrdered) {
        const counter = orderedCounters.get(depth) || 1;
        result += `${indent}${counter}. `;
        orderedCounters.set(depth, counter + 1);
      } else {
        const bullets = ['‚Ä¢', '‚ó¶', '‚ñ™'];
        const bullet = bullets[Math.min(depth, bullets.length - 1)];
        result += `${indent}${bullet} `;
      }
      
      let hasNestedList = false;
      
      Array.from(el.childNodes).forEach((child) => {
        if (child.nodeType === Node.ELEMENT_NODE) {
          const childEl = child as HTMLElement;
          const childTag = childEl.tagName.toLowerCase();
          
          if (childTag === 'ul' || childTag === 'ol') {
            hasNestedList = true;
            processNode(child, depth + 1, orderedCounters);
          } else {
            processNode(child, depth, orderedCounters);
          }
        } else {
          processNode(child, depth, orderedCounters);
        }
      });
      
      if (!hasNestedList) {
        result += '\n';
      }
      return;
    }
    
    // === –ó–ê–ì–û–õ–û–í–ö–ò (H1-H6) ===
    if (['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].includes(tagName)) {
      Array.from(el.childNodes).forEach((child) => {
        processNode(child, depth, orderedCounters);
      });
      result += '\n\n';
      return;
    }
    
    // === –ë–õ–û–ö–ò (P, DIV, BLOCKQUOTE) ===
    if (['p', 'div', 'blockquote'].includes(tagName)) {
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è DIV —Å –∫–æ–¥–æ–º
      if (tagName === 'div') {
        const directChildren = Array.from(el.children);
        const preChild = directChildren.find(child => child.tagName.toLowerCase() === 'pre');
        
        if (preChild) {
          let language = '';
          
          // –ò—â–µ–º —è–∑—ã–∫ –≤ —Å–æ—Å–µ–¥–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
          for (const child of directChildren) {
            if (child !== preChild) {
              const text = (child.textContent || '').trim();
              if (text.length > 0 && text.length < 20 && !text.toLowerCase().includes('cop')) {
                language = text;
                break;
              }
            }
          }
          
          // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ - –±–µ—Ä—ë–º –∏–∑ className
          if (!language) {
            const codeElement = preChild.querySelector('code');
            if (codeElement) {
              language = extractLanguageFromCode(codeElement);
            }
          }
          
          const codeElement = preChild.querySelector('code');
          const codeText = codeElement ? (codeElement.textContent || '').trim() : '';
          
          result += `\`\`\`${language}\n${codeText}\n\`\`\`\n\n`;
          return;
        }
      }
      
      Array.from(el.childNodes).forEach((child) => {
        processNode(child, depth, orderedCounters);
      });
      
      if (depth === 0) {
        result += '\n\n';
      }
      return;
    }
    
    // === –ü–ï–†–ï–ù–û–°–´ –°–¢–†–û–ö ===
    if (tagName === 'br') {
      result += '\n';
      return;
    }
    
    // === –ë–õ–û–ö–ò –ö–û–î–ê (PRE) ===
    if (tagName === 'pre') {
      const codeElement = el.querySelector('code');
      
      if (codeElement) {
        const language = extractLanguageFromCode(codeElement);
        const codeText = (codeElement.textContent || '').trim();
        
        result += `\`\`\`${language}\n${codeText}\n\`\`\`\n\n`;
      } else {
        result += el.textContent || '';
        result += '\n\n';
      }
      return;
    }
    
    // === –ò–ù–õ–ê–ô–ù –ö–û–î ===
    if (tagName === 'code' && el.parentElement?.tagName.toLowerCase() !== 'pre') {
      result += el.textContent || '';
      return;
    }
    
    // === –¢–ê–ë–õ–ò–¶–´ ===
    if (tagName === 'table') {
      result += '\n';
      Array.from(el.childNodes).forEach((child) => {
        processNode(child, depth, orderedCounters);
      });
      result += '\n';
      return;
    }
    
    if (tagName === 'tr') {
      Array.from(el.childNodes).forEach((child, index) => {
        if (child.nodeType === Node.ELEMENT_NODE) {
          processNode(child, depth, orderedCounters);
          if (index < el.childNodes.length - 1) {
            result += ' | ';
          }
        }
      });
      result += '\n';
      return;
    }
    
    if (tagName === 'th' || tagName === 'td') {
      Array.from(el.childNodes).forEach((child) => {
        processNode(child, depth, orderedCounters);
      });
      return;
    }
    
    // === –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –¢–ï–ö–°–¢–ê ===
    if (tagName === 'strong' || tagName === 'b' || tagName === 'em' || tagName === 'i') {
      Array.from(el.childNodes).forEach((child) => {
        processNode(child, depth, orderedCounters);
      });
      return;
    }
    
    // === –°–°–´–õ–ö–ò ===
    if (tagName === 'a') {
      Array.from(el.childNodes).forEach((child) => {
        processNode(child, depth, orderedCounters);
      });
      return;
    }
    
    // === –ì–û–†–ò–ó–û–ù–¢–ê–õ–¨–ù–ê–Ø –õ–ò–ù–ò–Ø ===
    if (tagName === 'hr') {
      result += '\n---\n\n';
      return;
    }
    
    // === FALLBACK: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã ===
    Array.from(el.childNodes).forEach((child) => {
      processNode(child, depth, orderedCounters);
    });
  }
  
  processNode(element);
  
  // –û—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª—è–µ–º –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
  return result
    .replace(/\n{3,}/g, '\n\n')
    .replace(/\n+$/g, '\n')
    .trim();
}