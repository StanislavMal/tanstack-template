// üìÑ src/hooks/useScrollManagement.ts

import { useRef, useState, useCallback, useLayoutEffect, useEffect } from 'react';

export function useScrollManagement() {
  const messagesContainerRef = useRef<HTMLElement>(null);
  const contentRef = useRef<HTMLDivElement>(null);
  const isLockedToBottomRef = useRef(true);
  const [showScrollDownButton, setShowScrollDownButton] = useState(false);

  const forceScrollToBottom = useCallback((behavior: 'smooth' | 'auto' = 'smooth') => {
    const container = messagesContainerRef.current;
    if (container) {
      container.scrollTo({ top: container.scrollHeight, behavior });
    }
  }, []);

  const scrollToBottom = useCallback(() => {
    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–Ω–æ–ø–∫–æ–π "–≤–Ω–∏–∑" –∏–ª–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    isLockedToBottomRef.current = true;
    setShowScrollDownButton(false);
    forceScrollToBottom('smooth');
  }, [forceScrollToBottom]);

  // –°–ª–µ–¥–∏–º –∑–∞ —Ä–æ—Å—Ç–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Å—Ç—Ä–∏–º–∏–Ω–≥)
  useLayoutEffect(() => {
    const contentElement = contentRef.current;
    if (!contentElement) return;

    const observer = new ResizeObserver(() => {
      if (isLockedToBottomRef.current) {
        forceScrollToBottom('auto');
      }
    });

    observer.observe(contentElement);
    return () => observer.disconnect();
  }, [forceScrollToBottom]);

  // –°–ª–µ–¥–∏–º –∑–∞ —Å–∫—Ä–æ–ª–ª–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    const container = messagesContainerRef.current;
    if (!container) return;

    const handleScroll = () => {
      const { scrollTop, scrollHeight, clientHeight } = container;
      // –ü—Ä–æ—Å—Ç–æ–π –ø–æ—Ä–æ–≥ –≤ 10 –ø–∏–∫—Å–µ–ª–µ–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π
      const isAtBottom = scrollHeight - scrollTop - clientHeight < 10;
      isLockedToBottomRef.current = isAtBottom;

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–∫—Ä—É—Ç–∏–ª –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤–≤–µ—Ä—Ö
      const isScrolledUp = scrollHeight - scrollTop - clientHeight > 150;
      setShowScrollDownButton(isScrolledUp);
    };

    container.addEventListener('scroll', handleScroll, { passive: true });
    
    // –ü–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    handleScroll();

    return () => container.removeEventListener('scroll', handleScroll);
  }, []);

  const lockToBottom = useCallback(() => {
    isLockedToBottomRef.current = true;
    setShowScrollDownButton(false);
  }, []);

  return {
    messagesContainerRef,
    contentRef,
    showScrollDownButton,
    scrollToBottom,
    forceScrollToBottom,
    lockToBottom,
  };
}