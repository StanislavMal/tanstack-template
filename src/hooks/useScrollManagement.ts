// üìÑ src/hooks/useScrollManagement.ts

import { useRef, useState, useCallback, useLayoutEffect, useEffect } from 'react';

export function useScrollManagement() {
  const messagesContainerRef = useRef<HTMLElement>(null);
  const contentRef = useRef<HTMLDivElement>(null);
  const isLockedToBottomRef = useRef(true);
  const lastScrollTopRef = useRef(0);
  const resizeObserverRef = useRef<ResizeObserver | null>(null);
  const [showScrollDownButton, setShowScrollDownButton] = useState(false);

  const forceScrollToBottom = useCallback((behavior: 'smooth' | 'auto' = 'smooth') => {
    const container = messagesContainerRef.current;
    if (container) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º requestAnimationFrame –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏, —á—Ç–æ DOM –æ–±–Ω–æ–≤–ª–µ–Ω
      requestAnimationFrame(() => {
        container.scrollTo({ 
          top: container.scrollHeight, 
          behavior,
          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è Safari
          ...(behavior === 'auto' && { behavior: 'instant' as any })
        });
      });
    }
  }, []);

  const scrollToBottom = useCallback(() => {
    isLockedToBottomRef.current = true;
    forceScrollToBottom('smooth');
    setShowScrollDownButton(false);
  }, [forceScrollToBottom]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ResizeObserver
  useLayoutEffect(() => {
    const setupResizeObserver = () => {
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π observer
      if (resizeObserverRef.current) {
        resizeObserverRef.current.disconnect();
        resizeObserverRef.current = null;
      }

      const contentElement = contentRef.current;
      if (!contentElement) {
        // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤, –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫
        const retryTimeout = setTimeout(setupResizeObserver, 100);
        return () => clearTimeout(retryTimeout);
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π ResizeObserver
      resizeObserverRef.current = new ResizeObserver((entries) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        for (const entry of entries) {
          if (entry.target === contentElement) {
            // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∫ –Ω–∏–∑—É
            if (isLockedToBottomRef.current) {
              forceScrollToBottom('auto');
            }
          }
        }
      });

      // –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ
      resizeObserverRef.current.observe(contentElement);

      // –î–µ–ª–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É –≤–Ω–∏–∑
      if (isLockedToBottomRef.current) {
        forceScrollToBottom('auto');
      }
    };

    setupResizeObserver();

    // Cleanup
    return () => {
      if (resizeObserverRef.current) {
        resizeObserverRef.current.disconnect();
        resizeObserverRef.current = null;
      }
    };
  }, [forceScrollToBottom]);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–∫—Ä–æ–ª–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    const container = messagesContainerRef.current;
    if (!container) {
      // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤, –ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ
      const retryTimeout = setTimeout(() => {
        const retryContainer = messagesContainerRef.current;
        if (retryContainer && isLockedToBottomRef.current) {
          forceScrollToBottom('auto');
        }
      }, 100);
      return () => clearTimeout(retryTimeout);
    }

    const handleScroll = () => {
      const { scrollTop, scrollHeight, clientHeight } = container;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–æ–ª–ª–∞
      const isScrollingUp = scrollTop < lastScrollTopRef.current;
      const isScrollingDown = scrollTop > lastScrollTopRef.current;
      
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫—Ä–æ–ª–ª–∏—Ç –≤–≤–µ—Ä—Ö - –æ—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª
      if (isScrollingUp && scrollTop > 0) {
        isLockedToBottomRef.current = false;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –º—ã –Ω–∏–∑–∞ (—Å –Ω–µ–±–æ–ª—å—à–∏–º –¥–æ–ø—É—Å–∫–æ–º –≤ 5px –¥–ª—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏)
      const isAtBottom = scrollHeight - scrollTop - clientHeight < 5;
      
      // –ï—Å–ª–∏ —Å–∫—Ä–æ–ª–ª–∏–º –≤–Ω–∏–∑ –∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –Ω–∏–∑–∞ - –≤–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª
      if (isScrollingDown && isAtBottom) {
        isLockedToBottomRef.current = true;
      }
      
      lastScrollTopRef.current = scrollTop;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –≤–Ω–∏–∑ –µ—Å–ª–∏ –æ—Ç—Å–∫—Ä–æ–ª–ª–∏–ª–∏ –±–æ–ª—å—à–µ —á–µ–º –Ω–∞ 150px
      const shouldShowButton = scrollHeight - scrollTop - clientHeight > 150;
      setShowScrollDownButton(shouldShowButton && !isLockedToBottomRef.current);
    };

    container.addEventListener('scroll', handleScroll, { passive: true });
    
    // –î–µ–ª–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (isLockedToBottomRef.current) {
      forceScrollToBottom('auto');
    }

    return () => {
      container.removeEventListener('scroll', handleScroll);
    };
  }, [forceScrollToBottom]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫ –Ω–∏–∑—É (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
  const lockToBottom = useCallback(() => {
    isLockedToBottomRef.current = true;
    setShowScrollDownButton(false);
    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
    forceScrollToBottom('auto');
  }, [forceScrollToBottom]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  const checkAndRestoreScroll = useCallback(() => {
    const container = messagesContainerRef.current;
    if (container && isLockedToBottomRef.current) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º setTimeout —á—Ç–æ–±—ã –¥–∞—Ç—å –≤—Ä–µ–º—è DOM –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
      setTimeout(() => {
        forceScrollToBottom('auto');
      }, 0);
    }
  }, [forceScrollToBottom]);

  return {
    messagesContainerRef,
    contentRef,
    showScrollDownButton,
    scrollToBottom,
    forceScrollToBottom,
    lockToBottom,
    checkAndRestoreScroll, // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
  };
}