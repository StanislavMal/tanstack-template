// üìÑ src/hooks/useScrollManagement.ts

import { useRef, useState, useCallback, useLayoutEffect } from 'react';

export function useScrollManagement(messageCount: number = 0) {
  const scrollContainerRef = useRef<HTMLElement>(null);
  const contentRef = useRef<HTMLDivElement>(null);

  const isLockedToBottomRef = useRef(true);
  const [showScrollDownButton, setShowScrollDownButton] = useState(false);
  
  const prevMessageCountRef = useRef(messageCount);
  
  // ‚úÖ –ù–û–í–û–ï: –§–ª–∞–≥ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞ (–≤—ã–∑–≤–∞–Ω–Ω–æ–≥–æ –∏–∑ –∫–æ–¥–∞, –∞ –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
  const isProgrammaticScrollRef = useRef(false);
  
  // ‚úÖ –ù–û–í–û–ï: –¢–∞–π–º–µ—Ä –¥–ª—è –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–∞ (–∑–∞—â–∏—Ç–∞ –æ—Ç —á–∞—Å—Ç—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π)
  const scrollTimeoutRef = useRef<NodeJS.Timeout | null>(null);

  const forceScrollToBottom = useCallback((behavior: 'smooth' | 'auto' = 'auto') => {
    const container = scrollContainerRef.current;
    if (container) {
      // ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ —ç—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π —Å–∫—Ä–æ–ª–ª, –Ω–µ —Ä–µ–∞–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      isProgrammaticScrollRef.current = true;
      
      container.scrollTo({
        top: container.scrollHeight,
        behavior,
      });
      
      // ‚úÖ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
      // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö scrollTo –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –¥–æ 150ms
      setTimeout(() => {
        isProgrammaticScrollRef.current = false;
      }, 150);
    }
  }, []);

  useLayoutEffect(() => {
    const container = scrollContainerRef.current;
    const content = contentRef.current;
    if (!container || !content) return;

    // ‚úÖ –£–õ–£–ß–®–ï–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π
    const handleScroll = () => {
      // ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è scroll, –≤—ã–∑–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ (–∏–∑ ResizeObserver)
      if (isProgrammaticScrollRef.current) {
        return;
      }
      
      // ‚úÖ –ù–û–í–û–ï: –î–µ–±–∞—É–Ω—Å–∏–Ω–≥ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —Å–∫—Ä–æ–ª–ª –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è
      // –≠—Ç–æ –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç "–¥—Ä–æ–∂–∞–Ω–∏—è" –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–º —Å—Ç—Ä–∏–º–∏–Ω–≥–µ
      if (scrollTimeoutRef.current) {
        clearTimeout(scrollTimeoutRef.current);
      }
      
      scrollTimeoutRef.current = setTimeout(() => {
        const { scrollTop, scrollHeight, clientHeight } = container;
        
        // ‚úÖ –£–õ–£–ß–®–ï–ù–û: –£–≤–µ–ª–∏—á–µ–Ω –ø–æ—Ä–æ–≥ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        // –ë—ã–ª–æ 5px ‚Üí —Å—Ç–∞–ª–æ 20px (–±–æ–ª–µ–µ –º—è–≥–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
        const threshold = 20;
        const isAtBottom = scrollHeight - scrollTop - clientHeight < threshold;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        isLockedToBottomRef.current = isAtBottom;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–≤–Ω–∏–∑" –µ—Å–ª–∏ –¥–∞–ª–µ–∫–æ –æ—Ç –Ω–∏–∑–∞
        const shouldShowButton = scrollHeight - scrollTop - clientHeight > 150;
        setShowScrollDownButton(shouldShowButton && !isAtBottom);
        
        scrollTimeoutRef.current = null;
      }, 50); // ‚úÖ –î–µ–±–∞—É–Ω—Å 50ms - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∫—Ä–æ–ª–ª–∞
    };

    // ResizeObserver —Å–ª–µ–¥–∏—Ç –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Å—Ç—Ä–∏–º–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞)
    const resizeObserver = new ResizeObserver(() => {
      if (isLockedToBottomRef.current) {
        forceScrollToBottom('auto');
      }
    });

    resizeObserver.observe(content);
    container.addEventListener('scroll', handleScroll, { passive: true });

    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if (messageCount > prevMessageCountRef.current) {
      isLockedToBottomRef.current = true;
      forceScrollToBottom('auto');
      prevMessageCountRef.current = messageCount;
    }

    return () => {
      container.removeEventListener('scroll', handleScroll);
      resizeObserver.disconnect();
      
      // ‚úÖ –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
      if (scrollTimeoutRef.current) {
        clearTimeout(scrollTimeoutRef.current);
      }
    };
  }, [messageCount, forceScrollToBottom]);

  const scrollToBottom = useCallback(() => {
    isLockedToBottomRef.current = true;
    forceScrollToBottom('smooth');
  }, [forceScrollToBottom]);

  const lockToBottom = useCallback(() => {
    isLockedToBottomRef.current = true;
    forceScrollToBottom('auto');
  }, [forceScrollToBottom]);

  return {
    messagesContainerRef: scrollContainerRef,
    contentRef,
    showScrollDownButton,
    scrollToBottom,
    lockToBottom,
  };
}