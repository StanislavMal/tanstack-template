// üìÑ src/lib/ai/server.ts

import { createServerFn } from '@tanstack/react-start';
import { AIProviderFactory } from './provider-factory';
import type { Message, AIProviderConfig } from './types';

export interface ChatRequest {
  messages: Message[];
  provider: string;
  model: string;
  systemInstruction?: string;
  activePromptContent?: string;
  temperature?: number;
  maxTokens?: number;
  reasoningEffort?: 'none' | 'low' | 'medium' | 'high';
}

export const streamChat = createServerFn({
  method: 'POST',
  response: 'raw'
})
  .validator((data: ChatRequest) => data)
  .handler(async ({ data }) => {
    try {
      const provider = AIProviderFactory.getProvider(data.provider);
      
      // –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
      const finalMessages = [...data.messages];
      
      const fullSystemInstruction = [
        data.systemInstruction,
        data.activePromptContent
      ].filter(Boolean).join('\n\n');

      // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –∫–∞–∫ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (fullSystemInstruction) {
        finalMessages.unshift({
          id: 'system-instruction', // ID –Ω–µ –≤–∞–∂–µ–Ω, —Ç.–∫. —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          role: 'system',
          content: fullSystemInstruction,
        });
      }

      const config: Partial<AIProviderConfig> = {
        model: data.model,
        // systemInstruction –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω, —Ç.–∫. –æ–Ω —É–∂–µ –≤ `finalMessages`
        temperature: data.temperature,
        maxTokens: data.maxTokens,
        reasoningEffort: data.reasoningEffort,
      };

      // –ü–µ—Ä–µ–¥–∞–µ–º –≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä —É–∂–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
      const stream = await provider.streamChat(finalMessages, config);
      
      return new Response(stream, {
        headers: {
          'Content-Type': 'text/event-stream',
          'Cache-Control': 'no-cache',
          'Connection': 'keep-alive',
        },
      });
    } catch (error) {
      console.error('Error in streamChat:', error);
      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
      return new Response(
        JSON.stringify({ error: `Failed to stream chat: ${errorMessage}` }), 
        { 
          status: 500,
          headers: { 'Content-Type': 'application/json' },
        }
      );
    }
  });
