// üìÑ src/components/InlineCode.tsx

import { useState, useRef, useEffect, type ReactNode, type HTMLAttributes } from 'react';

interface InlineCodeProps extends HTMLAttributes<HTMLElement> {
  children?: ReactNode;
  node?: any; // ReactMarkdown –ø–µ—Ä–µ–¥–∞—ë—Ç node
}

/**
 * Inline –∫–æ–¥ —Å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ –∫–ª–∏–∫—É
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¢–û–õ–¨–ö–û –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ–¥–∞ –≤ —Ç–µ–∫—Å—Ç–µ
 * –î–ª—è –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞ (–≤–Ω—É—Ç—Ä–∏ <pre>) —Ä–µ–Ω–¥–µ—Ä–∏—Ç –æ–±—ã—á–Ω—ã–π <code>
 */
export const InlineCode = ({ children, node, ...props }: InlineCodeProps) => {
  const [isCopied, setIsCopied] = useState(false);
  const timeoutRef = useRef<NodeJS.Timeout | null>(null);

  // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }
    };
  }, []);

  // ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ code –≤–Ω—É—Ç—Ä–∏ pre
  // –ï—Å–ª–∏ –¥–∞ - —Ä–µ–Ω–¥–µ—Ä–∏–º –æ–±—ã—á–Ω—ã–π <code> –±–µ–∑ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏
  const isInsidePre = node?.position?.start?.column !== undefined && 
                      props.className?.includes('language-');

  // –ï—Å–ª–∏ —ç—Ç–æ –±–ª–æ–∫ –∫–æ–¥–∞ - —Ä–µ–Ω–¥–µ—Ä–∏–º –æ–±—ã—á–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
  if (isInsidePre || props.className?.startsWith('language-')) {
    return <code {...props}>{children}</code>;
  }

  const handleCopy = (e: React.MouseEvent<HTMLElement>) => {
    e.stopPropagation();
    
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
    }

    const codeText = e.currentTarget.textContent || '';
    
    navigator.clipboard.writeText(codeText)
      .then(() => {
        setIsCopied(true);
        
        timeoutRef.current = setTimeout(() => {
          setIsCopied(false);
          timeoutRef.current = null;
        }, 1200);
      })
      .catch(err => {
        console.error('Failed to copy inline code:', err);
      });
  };

  return (
    <code
      {...props}
      onClick={handleCopy}
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä-–∫–ª–∞—Å—Å –¥–ª—è CSS
      className={`custom-inline-code ${
        isCopied 
          ? 'copied' 
          : ''
      }`}
      // ‚úÖ –í—Å–µ —Å—Ç–∏–ª–∏ —Ç–µ–ø–µ—Ä—å –≤ CSS –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    >
      {children}
    </code>
  );
};