// üìÑ src/components/CodeBlock.tsx

import { useState, useRef, type ReactNode, type HTMLAttributes } from 'react';
import { Copy, Check } from 'lucide-react';

interface CodeBlockProps extends HTMLAttributes<HTMLPreElement> {
  children?: ReactNode;
}

export const CodeBlock = ({ children, ...props }: CodeBlockProps) => {
  const [isCopied, setIsCopied] = useState(false);
  const codeRef = useRef<HTMLElement>(null);
  
  let language = 'text';

  // –ò–∑–≤–ª–µ–∫–∞–µ–º —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ className
  if (children && typeof children === 'object' && 'props' in children) {
    const codeProps = (children as { props: { className?: string; children?: ReactNode } }).props;
    const langMatch = /language-(\w+)/.exec(codeProps.className || '');
    if (langMatch) {
      language = langMatch[1];
    }
  }

  const handleCopy = () => {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é –∏–∑ DOM —ç–ª–µ–º–µ–Ω—Ç–∞
    if (codeRef.current) {
      const codeText = codeRef.current.textContent || '';
      navigator.clipboard.writeText(codeText);
      setIsCopied(true);
      setTimeout(() => setIsCopied(false), 2000);
    }
  };

  return (
    // ‚úÖ –§–ò–ù–ê–õ–¨–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –§–æ–Ω –±–ª–æ–∫–∞ –∫–æ–¥–∞ —Ç–µ–ø–µ—Ä—å –∫–∞–∫ —É —è—á–µ–µ–∫ —Ç–∞–±–ª–∏—Ü—ã
    // - `bg-gray-800/50` –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ `bg-gray-800/20`.
    <div className="relative my-4 bg-gray-800/20 rounded-md border border-orange-500/25">
      {/* 
        –°—Ç–µ–∫–ª—è–Ω–Ω–∞—è —à–∞–ø–∫–∞ —Å –Ω–∏–∂–Ω–µ–π —Ä–∞–º–∫–æ–π, —Å–ª—É–∂–∞—â–µ–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º.
        –í—Å–µ —Å—Ç–∏–ª–∏ –≥–∞—Ä–º–æ–Ω–∏—á–Ω–æ —Å–æ—á–µ—Ç–∞—é—Ç—Å—è.
      */}
      <div className="sticky top-0 z-10 flex items-center justify-between px-4 py-2 rounded-t-md bg-orange-400/[.15] backdrop-blur border-b border-orange-500/25">
        <span className="font-sans text-sm font-semibold uppercase text-amber-400">{language}</span>
        <button
          onClick={handleCopy}
          className="p-1 rounded-md text-amber-400 transition-colors hover:bg-gray-700 hover:text-amber-300"
          title={isCopied ? 'Copied!' : 'Copy code'}
        >
          {isCopied ? <Check className="w-4 h-4 text-green-500" /> : <Copy className="w-4 h-4" />}
        </button>
      </div>
      {/* –û–±–ª–∞—Å—Ç—å –¥–ª—è –∫–æ–¥–∞ —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç –Ω—É–∂–Ω—ã–π —Ñ–æ–Ω –∑–∞ —Å—á–µ—Ç –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è */}
      <pre {...props} className="overflow-x-auto p-4 text-sm">
        <code ref={codeRef}>
          {children}
        </code>
      </pre>
    </div>
  );
};