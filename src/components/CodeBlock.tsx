// üìÑ src/components/CodeBlock.tsx (–ù–æ–≤–∞—è, –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)

import { useState, type ReactNode, type HTMLAttributes } from 'react';
import { Copy, Check } from 'lucide-react';

// –ü—Ä–æ–ø—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ ReactMarkdown –ø–µ—Ä–µ–¥–∞–µ—Ç –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è <pre>
interface CodeBlockProps extends HTMLAttributes<HTMLPreElement> {
  children?: ReactNode;
  // node?: any; // node –Ω–∞–º –Ω–µ –Ω—É–∂–µ–Ω
}

export const CodeBlock = ({ children, ...props }: CodeBlockProps) => {
  const [isCopied, setIsCopied] = useState(false);
  
  // `children` –¥–ª—è <pre> - —ç—Ç–æ –æ–±—ã—á–Ω–æ –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç `<code>`
  // –ú—ã –∑–∞–≥–ª—è–¥—ã–≤–∞–µ–º –≤ –µ–≥–æ props, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ className
  let language = 'text';
  let codeContent = '';

  if (children && typeof children === 'object' && 'props' in children) {
    const codeProps = (children as { props: { className?: string; children?: ReactNode } }).props;
    const langMatch = /language-(\w+)/.exec(codeProps.className || '');
    if (langMatch) {
      language = langMatch[1];
    }
    // –°–∞–º –∫–æ–¥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ children —Ç–µ–≥–∞ <code>
    if (codeProps.children) {
      codeContent = String(codeProps.children).replace(/\n$/, '');
    }
  }

  const handleCopy = () => {
    if (codeContent) {
      navigator.clipboard.writeText(codeContent);
      setIsCopied(true);
      setTimeout(() => setIsCopied(false), 2000);
    }
  };

  return (
    // -> –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í–Ω–µ—à–Ω–∏–π `div` –¥–ª—è `sticky`, –∞ `<pre>` –≤–Ω—É—Ç—Ä–∏.
    // `my-4` - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç—Å—Ç—É–ø –¥–ª—è –±–ª–æ–∫–æ–≤ <pre> –≤ prose.
    <div className="relative my-4 bg-gray-800/50 rounded-md">
      {/* –®–∞–ø–∫–∞ –ø—Ä–∏–ª–∏–ø–∞–µ—Ç –∫ –≤–µ—Ä—Ö—É —ç—Ç–æ–≥–æ div */}
      <div className="sticky top-0 z-10 flex items-center justify-between px-3 py-1 border-b border-gray-700/50 bg-gray-800 rounded-t-md">
        <span className="font-sans text-xs font-semibold text-gray-400 uppercase">{language}</span>
        <button
          onClick={handleCopy}
          className="p-1 rounded-md text-gray-400 hover:bg-gray-700 hover:text-white"
        >
          {isCopied ? <Check className="w-4 h-4 text-green-500" /> : <Copy className="w-4 h-4" />}
        </button>
      </div>
      <pre {...props} className="overflow-x-auto p-4 text-sm">
        {children}
      </pre>
    </div>
  );
};