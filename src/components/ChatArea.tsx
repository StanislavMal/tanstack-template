// üìÑ src/components/ChatArea.tsx

import { memo as ReactMemo, useMemo, forwardRef } from 'react';
import { AlertTriangle } from 'lucide-react';
import { useTranslation } from 'react-i18next';
import { ChatMessage, LoadingIndicator, WelcomeScreen } from '../components';
import { StreamingMessage } from './StreamingMessage';
import type { Message } from '../lib/ai/types';

interface ChatAreaProps {
  messages: Message[];
  pendingMessage: Message | null;
  isLoading: boolean;
  error: string | null;
  currentConversationId: string | null;
  editingMessageId: string | null;
  
  onStartEdit: (id: string) => void;
  onCancelEdit: () => void;
  onSaveEdit: (id: string, content: string) => void;
}

const ChatAreaComponent = ReactMemo(
  forwardRef<HTMLDivElement, ChatAreaProps>(
    (
      {
        messages,
        pendingMessage,
        isLoading,
        error,
        currentConversationId,
        editingMessageId,
        onStartEdit,
        onCancelEdit,
        onSaveEdit,
      },
      ref
    ) => {
      const { t } = useTranslation();

      // ‚úÖ –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      const savedMessages = useMemo(() => messages, [messages]);

      const showLoading = isLoading || (pendingMessage && !pendingMessage.content);

      const handleMessageActions = useMemo(() => (e: React.MouseEvent<HTMLDivElement>) => {
        const target = e.target as HTMLElement;
        const button = target.closest('button[data-action]');
        
        if (!button) return;

        const messageDiv = target.closest('[data-message-id]');
        const messageId = messageDiv?.getAttribute('data-message-id');
        
        if (!messageId) return;

        const action = button.getAttribute('data-action');

        if (action === 'start-edit') {
          onStartEdit(messageId);
        }
      }, [onStartEdit]);

      return (
        <div ref={ref} className="w-full h-full p-4" onClick={handleMessageActions}>
          {error && (
            <div className="bg-red-500/10 border-l-4 border-red-500 text-red-300 p-4 mb-4 rounded-r-lg" role="alert">
              <div className="flex">
                <div className="py-1">
                  <AlertTriangle className="h-5 w-5 text-red-400 mr-3" />
                </div>
                <div>
                  <p className="font-bold">{t('errorOccurred')}</p>
                  <p className="text-sm">{error}</p>
                </div>
              </div>
            </div>
          )}

          <div className="space-y-4">
            {currentConversationId ? (
              <>
                {/* ‚úÖ –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –º–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å—Ç—Ä–æ–≥–æ */}
                {savedMessages.map((message) => (
                  <ChatMessage
                    key={message.id}
                    message={message}
                    isEditing={editingMessageId === message.id}
                    onSaveEdit={onSaveEdit}
                    onCancelEdit={onCancelEdit}
                  />
                ))}
                
                {/* ‚úÖ –°—Ç—Ä–∏–º—è—â–µ–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ—Ç–¥–µ–ª—å–Ω—ã–π lightweight –∫–æ–º–ø–æ–Ω–µ–Ω—Ç */}
                {pendingMessage && pendingMessage.content && (
                  <StreamingMessage content={pendingMessage.content} />
                )}
                
                {showLoading && <LoadingIndicator />}
              </>
            ) : (
              <WelcomeScreen />
            )}
          </div>
        </div>
      );
    }
  ),
  // ‚úÖ –ú–µ–º–æ–∏–∑–∞—Ü–∏—è: —Ä–µ-—Ä–µ–Ω–¥–µ—Ä–∏–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  (prevProps, nextProps) => {
    // –ò–∑–º–µ–Ω–∏–ª–∏—Å—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è?
    if (
      prevProps.messages.length !== nextProps.messages.length ||
      prevProps.currentConversationId !== nextProps.currentConversationId ||
      prevProps.editingMessageId !== nextProps.editingMessageId ||
      prevProps.error !== nextProps.error
    ) {
      return false;
    }

    // –ü–æ—è–≤–∏–ª–æ—Å—å/–∏—Å—á–µ–∑–ª–æ —Å—Ç—Ä–∏–º—è—â–µ–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ?
    const hadPending = !!prevProps.pendingMessage?.content;
    const hasPending = !!nextProps.pendingMessage?.content;
    
    if (hadPending !== hasPending) {
      return false; // –ù—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å StreamingMessage
    }

    // isLoading –∏–∑–º–µ–Ω–∏–ª—Å—è?
    if (prevProps.isLoading !== nextProps.isLoading) {
      return false;
    }

    // ‚úÖ –í–ê–ñ–ù–û: –ù–ï —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º pendingMessage.content!
    // –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç StreamingMessage –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ
    
    return true; // –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –æ–¥–∏–Ω–∞–∫–æ–≤–æ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ-—Ä–µ–Ω–¥–µ—Ä
  }
);

ChatAreaComponent.displayName = 'ChatArea';

export const ChatArea = ChatAreaComponent;