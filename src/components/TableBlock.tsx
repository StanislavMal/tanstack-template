// üìÑ src/components/TableBlock.tsx

import { useState, useRef, useEffect, type ReactNode, type HTMLAttributes } from 'react';
import { Copy, Check } from 'lucide-react';

interface TableBlockProps extends HTMLAttributes<HTMLTableElement> {
  children?: ReactNode;
}

/**
 * –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü —Å –∫–Ω–æ–ø–∫–æ–π –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
 */
export const TableBlock = ({ children, ...props }: TableBlockProps) => {
  const [isCopied, setIsCopied] = useState(false);
  const [isHovered, setIsHovered] = useState(false);
  const containerRef = useRef<HTMLDivElement>(null);
  const copyTimeoutRef = useRef<NodeJS.Timeout | null>(null);

  // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (copyTimeoutRef.current) {
        clearTimeout(copyTimeoutRef.current);
      }
    };
  }, []);

  const handleCopyTable = (e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    
    console.log('[TableBlock] Copy button clicked');
    
    if (!containerRef.current) {
      console.error('[TableBlock] containerRef is null');
      return;
    }

    const table = containerRef.current.querySelector('table');
    if (!table) {
      console.error('[TableBlock] No table found');
      return;
    }

    console.log('[TableBlock] Table found, starting copy process');

    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    const tempDiv = document.createElement('div');
    tempDiv.style.position = 'fixed';
    tempDiv.style.left = '-9999px';
    tempDiv.style.top = '-9999px';
    tempDiv.contentEditable = 'true';
    
    // –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
    const clonedTable = table.cloneNode(true) as HTMLTableElement;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º inline —Å—Ç–∏–ª–∏ –¥–ª—è Word
    clonedTable.style.borderCollapse = 'collapse';
    clonedTable.style.width = 'auto';
    clonedTable.style.fontFamily = 'Arial, sans-serif';
    clonedTable.style.fontSize = '11pt';
    clonedTable.style.border = '1px solid #000000';
    
    // –°—Ç–∏–ª–∏–∑—É–µ–º –≤—Å–µ —è—á–µ–π–∫–∏
    const allCells = clonedTable.querySelectorAll('th, td');
    allCells.forEach(cell => {
      const htmlCell = cell as HTMLElement;
      htmlCell.style.border = '1px solid #000000';
      htmlCell.style.padding = '6px 8px';
      htmlCell.style.textAlign = cell.getAttribute('align') || 'left';
      htmlCell.style.verticalAlign = 'middle';
    });
    
    // –°—Ç–∏–ª–∏–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const headers = clonedTable.querySelectorAll('th');
    headers.forEach(header => {
      const htmlHeader = header as HTMLElement;
      htmlHeader.style.backgroundColor = '#f0f0f0';
      htmlHeader.style.fontWeight = 'bold';
    });

    // –ß–µ—Ä–µ–¥—É—é—â–∏–µ—Å—è —Å—Ç—Ä–æ–∫–∏
    const rows = clonedTable.querySelectorAll('tbody tr');
    rows.forEach((row, index) => {
      if (index % 2 === 1) {
        (row as HTMLElement).style.backgroundColor = '#fafafa';
      }
    });

    tempDiv.appendChild(clonedTable);
    document.body.appendChild(tempDiv);

    try {
      // –í—ã–¥–µ–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
      const range = document.createRange();
      range.selectNodeContents(tempDiv);
      
      const selection = window.getSelection();
      if (selection) {
        selection.removeAllRanges();
        selection.addRange(range);
        
        console.log('[TableBlock] Content selected, attempting copy...');
        
        // –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
        let success = false;
        
        try {
          success = document.execCommand('copy');
          console.log('[TableBlock] execCommand result:', success);
        } catch (err) {
          console.error('[TableBlock] execCommand failed:', err);
        }
        
        // –û—á–∏—â–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        selection.removeAllRanges();
        
        if (success) {
          console.log('[TableBlock] Copy successful!');
          setIsCopied(true);
          
          if (copyTimeoutRef.current) {
            clearTimeout(copyTimeoutRef.current);
          }
          
          copyTimeoutRef.current = setTimeout(() => {
            setIsCopied(false);
            console.log('[TableBlock] Copy indicator reset');
          }, 2000);
        } else {
          console.warn('[TableBlock] execCommand returned false, trying Clipboard API');
          
          // Fallback –Ω–∞ Clipboard API
          const htmlContent = tempDiv.innerHTML;
          
          // –ü—Ä–æ–±—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π API
          if (navigator.clipboard && navigator.clipboard.write) {
            const blob = new Blob([htmlContent], { type: 'text/html' });
            const clipboardItem = new ClipboardItem({ 'text/html': blob });
            
            navigator.clipboard.write([clipboardItem])
              .then(() => {
                console.log('[TableBlock] Clipboard API success');
                setIsCopied(true);
                
                if (copyTimeoutRef.current) {
                  clearTimeout(copyTimeoutRef.current);
                }
                
                copyTimeoutRef.current = setTimeout(() => {
                  setIsCopied(false);
                }, 2000);
              })
              .catch(err => {
                console.error('[TableBlock] Clipboard API failed:', err);
                
                // –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - –∫–æ–ø–∏—Ä—É–µ–º –∫–∞–∫ plain text
                const plainText = Array.from(table.querySelectorAll('tr'))
                  .map(row => {
                    return Array.from(row.querySelectorAll('th, td'))
                      .map(cell => (cell.textContent || '').trim())
                      .join('\t');
                  })
                  .join('\n');
                
                navigator.clipboard.writeText(plainText)
                  .then(() => {
                    console.log('[TableBlock] Plain text fallback success');
                    setIsCopied(true);
                    
                    if (copyTimeoutRef.current) {
                      clearTimeout(copyTimeoutRef.current);
                    }
                    
                    copyTimeoutRef.current = setTimeout(() => {
                      setIsCopied(false);
                    }, 2000);
                  })
                  .catch(err => console.error('[TableBlock] All methods failed:', err));
              });
          } else {
            console.error('[TableBlock] Clipboard API not supported');
          }
        }
      }
    } catch (error) {
      console.error('[TableBlock] Error during copy:', error);
    } finally {
      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
      document.body.removeChild(tempDiv);
    }
  };

  return (
    <div 
      className="relative my-4 inline-block max-w-full"
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      {/* –ò–∫–æ–Ω–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è */}
      <button
        onClick={handleCopyTable}
        className={`absolute -top-3 -right-3 z-10 p-1.5 rounded-full transition-all duration-200 ${
          isHovered || isCopied
            ? 'opacity-100 scale-100' 
            : 'opacity-0 scale-75 pointer-events-none'
        } ${
          isCopied 
            ? 'bg-green-500/20 text-green-400' 
            : 'bg-[#0d1117]/90 text-amber-400 hover:text-amber-300 hover:bg-[#0d1117] border border-orange-500/30'
        }`}
        title={isCopied ? 'Copied!' : 'Copy table to clipboard'}
        type="button"
      >
        {isCopied ? (
          <Check className="w-4 h-4" />
        ) : (
          <Copy className="w-4 h-4" />
        )}
      </button>

      {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π */}
      <div 
        ref={containerRef}
        className="overflow-x-auto rounded-lg border border-orange-500/25 bg-[#0d1117]"
      >
        {/* ‚úÖ –†–µ–Ω–¥–µ—Ä–∏–º <table> —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–ø—Ä—è–º—É—é */}
        <table {...props}>
          {children}
        </table>
      </div>
    </div>
  );
};